import solutionWords from "../src/solution-words-alphabetical.json" assert { type: "json" };
import { writeFileSync } from "node:fs";
const charCodeForLowercaseA = 97;

// Convert each solution word into a u32 value

function toU32(word) {
  let res = 0;
  for (let i = 0; i < word.length; i++) {
    res = res * 26 + (word.charCodeAt(i) - charCodeForLowercaseA);
  }
  return res;
}

const STATIC_WORDLE_FREQUENCY_TABLE = [
  807, 244, 388, 330, 938, 182, 257, 328, 572, 23, 183, 579, 262, 474, 600, 304, 28, 746, 552, 596, 404, 135, 171, 33,
  367, 31,
];

function scoreNoLen(word) {
  let score = 1;
  for (let i = 0; i < word.length; i++) {
    const c = word.charCodeAt(i) - charCodeForLowercaseA;
    score *= STATIC_WORDLE_FREQUENCY_TABLE[c];
  }
  return score;
}
const maxScore = solutionWords.map(scoreNoLen).reduce((max, x) => (x > max ? x : max));

function score(word) {
  const charSet = new Set();
  let score = 1;
  for (let i = 0; i < word.length; i++) {
    const c = word.charCodeAt(i) - charCodeForLowercaseA;
    score *= STATIC_WORDLE_FREQUENCY_TABLE[c];
    charSet.add(c);
  }
  return maxScore * charSet.size + score;
}
const solutionWordsScore = solutionWords.map(score);
const solutionWordsWithScore = solutionWords.map((w, i) => [w, solutionWordsScore[i]]);
solutionWordsWithScore.sort(([_w, score1], [_w2, score2]) => score2 - score1); // max first
const sortedSolutionWords = solutionWordsWithScore.map(([w]) => w);

function toWordleWordNewtype(num) {
  return `WordleWord(${num})`;
}

const solutionWordsU32 = sortedSolutionWords.map(toU32).map(toWordleWordNewtype);

//  --------- Output ------------

const rustFileName = process.argv[2];
const jsonFileName = process.argv[3];
writeFileSync(
  rustFileName,
  `\
#![allow(clippy::all)]
#![allow(warnings)]
// Auto generated by make-solution-words.js
// Do not edit.


use crate::WordleWord;

/// List of wordle solution words
pub const SOLUTION_WORDS: [WordleWord; ${solutionWords.length}] = [${solutionWordsU32}];
`,
);
writeFileSync(jsonFileName, JSON.stringify(sortedSolutionWords));
